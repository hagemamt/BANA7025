?sd
?median
library(MASS)
apply(fgl[,1:9], MARGIN=2, mad)
?mad
qnorm(c(0.01, 0.99))
qnorm(c(0.05, 0.95))
qnorm(c(0.005, 0.995))
par = mfrow(c(1,2))
truehist(cabbages$HeadWt)
truehist(fgl$RI)
par(mfrow=c(1,2))
truehist(cabbages$HeadWt)
truehist(fgl$RI)
?truehist
?pty
??pty
par(mfrow=c(1,2), pty="s")
par(mfrow=c(1,2), pty="s")
truehist(cabbages$HeadWt)
truehist(fgl$RI)
truehist(cabbages$HeadWt, xlab="Cabbage head weight")
truehist(fgl$RI, xlab="fgl: refractive Index")
qqPlot(cabbages$HeadWt)
qqPlot(fgl$RI)
install.packages("car")
mean(rnorm(100))
mean(rnorm(100))
mean(rnorm(100))
exit
quit
library(tidyverse)
library(nycflights13)
#Filter Function in dplyr - Exercise 5.2.4
# Part 1 - flights with delays over 120 minutes
delayed_flights <- flights %>% filter(arr_delay > 120)
str(delayed_flights)
#Base-R
delayed_flights2 <- flights[flights$arr_delay > 120,]
str(delayed_flights2)
install.packages("dplyr")
library(nycflights13)
library(nycflights13)
library(tidyverse)
install.packages("nycflights13")
library(nycflights13)
#Filter Function in dplyr - Exercise 5.2.4
# Part 1 - flights with delays over 120 minutes
delayed_flights <- flights %>% filter(arr_delay > 120)
str(delayed_flights)
#Base-R
delayed_flights2 <- flights[flights$arr_delay > 120,]
str(delayed_flights2)
install.packages("gapminder")
str(gapminder)
library(gapminder)
str(gapminder)
?gapminder
scatterPlot1 <- ggplot(data=gapminder) +
geom_point(mapping=aes(x=gdpPercap, y=lifeExp)) +
ggtitle("GDP per capita vs. life expectancy")
scatterPlot1
library(ggplot2)
scatterPlot1 <- ggplot(data=gapminder) +
geom_point(mapping=aes(x=gdpPercap, y=lifeExp)) +
ggtitle("GDP per capita vs. life expectancy")
scatterPlot1
scatterPlot1 <- ggplot(data=gapminder) +
geom_point(mapping=aes(x=lifeExp, y=gdpPercap)) +
ggtitle("GDP per capita vs. life expectancy")
scatterPlot1
scatterPlot1 <- ggplot(data=gapminder) +
geom_point(mapping=aes(x=lifeExp, y=gdpPercap)) +
ggtitle("Life expectancy vs. GDP per capita")
scatterPlot1
scatterPlot1 <- ggplot(data=gapminder) +
geom_point(mapping=aes(x=gdpPercap, y=lifeExp)) +
ggtitle("GDP per capita vs. Life expectancy")
scatterPlot1
scatterPlot2 <- ggplot(data=gapminder) +
geom_point(mapping=aes(x=gdpPercap, y=lifeExp, color=continent)) +
ggtitle("GDP per capita vs. Life expectancy")
scatterPlot2
scatterPlot3 <- ggplot(data=gapminder) +
geom_point(mapping=aes(x=gdpPercap, y=lifeExp, color=continent,
size=population)) +
ggtitle("GDP per capita vs. Life expectancy")
scatterPlot3
scatterPlot3 <- ggplot(data=gapminder) +
geom_point(mapping=aes(x=gdpPercap, y=lifeExp, color=continent,
size=pop)) +
ggtitle("GDP per capita vs. Life expectancy")
scatterPlot3
#5
library(dplyr)
gapminder2007 <- gapminder %>% filter(year == 2007)
scatterPlot3 <- ggplot(data=gapminder) +
geom_point(mapping=aes(x=gdpPercap, y=lifeExp, color=continent,
size=pop)) +
ggtitle("GDP per capita vs. Life expectancy")
scatterPlot3
gapminder2007 <- gapminder %>% filter(year == 2007)
scatterPlot4 <- ggplot(data=gapminder2007) +
geom_point(mapping=aes(x=gdpPercap, y=lifeExp, color=continent,
size=pop)) +
ggtitle("GDP per capita vs. Life expectancy in 2007")
scatterPlot4
scatterPlot5 <- ggplot(data=gapminder2007) +
geom_point(mapping=aes(x=log(gdpPercap), y=lifeExp,
color=continent, size=pop)) +
ggtitle("Log of GDP per capita vs. Life expectancy in 2007")
scatterPlot5
asia = gapminder %>% filter(continent=="asia")
str(asia)
asia = gapminder %>% filter(continent=="Asia")
str(asia)
#7
head(gapminder)
asia <- gapminder %>% filter(continent=="Asia")
str(asia)
asia <- gapminder %>% filter(continent==Asia)
str(asia)
#7
asia <- gapminder %>% filter(continent=="Asia")
View(asia)
asia <- gapminder %>% filter(continent=="Asia")
str(asia)
gapminder_v2 <- gapminder %>% mutate(lifeExpToGDP=lifeExp/gdpPercap)
gapminder_v2 <- gapminder_v2 %>% arrange(desc(lifeExpToGDP))
head(gapminder_v2)
mean_life <- gapminder %<% summarise(mean_lifeExp = mean(lifeExp))
View(mean_life)
mean_life <- gapminder %>% summarise(mean_lifeExp = mean(lifeExp))
View(mean_life)
mean_life <- gapminder %>% group_by(year) %>% summarise(mean_lifeExp = mean(lifeExp))
View(mean_life)
mean_life <- gapminder %>% group_by(year) %>%
summarise(mean_lifeExp = mean(lifeExp))
View(mean_life)
View(mean_life)
scatterplot_mean_lifeExp <- ggplot(data=mean_life) +
geom_point(mapping=aes(x=mean_lifeExp, y=year)) +
ggtitle("Mean life expectancy by year")
scatterplot_mean_lifeExp
scatterplot_mean_lifeExp <- ggplot(data=mean_life) +
geom_point(mapping=aes(x=year, y=mean_lifeExp)) +
ggtitle("Mean life expectancy by year")
scatterplot_mean_lifeExp
euro1992 <- gapminder %>% filter(year=1992 & continent="Europe")
View(euro1992)
euro1992 <- gapminder %>% filter(year==1992 & continent=="Europe")
View(euro1992)
euro1992 <- gapminder %>%
filter(year==1992 & continent=="Europe") %>%
select(country, year, gdpPercap)
View(euro1992)
library(sqldf)
install.packages("sqldf")
library(sqldf)
euro_combined <- sqldf("SELECT a.country, a.year,
a.gdpPercap as 'gdp_1992',
b.gdpPercap as 'gdp_2002'
FROM euro1992 a
INNER JOIN euro2002 b
ON b.year = a.year
AND b.country = a.country")
head(euro_combined)
library(sqldf)
euro2002 <- gapminder %>%
filter(year==2002 & continent=="Europe") %>%
select(country, year, gdpPercap)
euro_combined <- sqldf("SELECT a.country, a.year,
a.gdpPercap as 'gdp_1992',
b.gdpPercap as 'gdp_2002'
FROM euro1992 a
INNER JOIN euro2002 b
ON b.year = a.year
AND b.country = a.country")
head(euro_combined)
euro_combined <- sqldf("SELECT a.country, a.year,
a.gdpPercap as 'gdp_1992',
b.gdpPercap as 'gdp_2002'
FROM euro1992 a
INNER JOIN euro2002 b
ON b.country = a.country")
head(euro_combined)
View(euro_combined)
euro_combined <- sqldf("SELECT a.country, a.gdpPercap as 'gdp_1992',
b.gdpPercap as 'gdp_2002'
FROM euro1992 a
INNER JOIN euro2002 b
ON b.country = a.country")
View(euro_combined)
euro_combined_df <- sqldf("SELECT a.country, a.gdpPercap as 'gdp_1992',
b.gdpPercap as 'gdp_2002'
FROM euro1992 a
INNER JOIN euro2002 b
ON b.country = a.country")
head(euro_combined_df)
#4.11
diamonds = read.csv("diamonds.csv")
diamonds = read.csv("C:/Users/Mark/Dropbox/UC/Data Analytics/BANA 6043 - Statistical Computing/Module 4/Assignment 4/diamonds.csv")
head(diamonds)
min_max <- function(input_vec) {
min <- min(input_vec, na.rm = TRUE)
max <- max(input_vec, na.rm = TRUE)
retvals <- list(min, max)
return(retvals)
}
#13
z_stats <- min_max(diamonds.z)
print(z_stats)
z_stats <- min_max(diamonds$z)
print(z_stats)
View(diamonds)
ints <- 1:100
ints
ints <- 1:100
for (i in ints) {
if (i %% 10 == 0) {
paste0('Number', i, 'is divisible by 10.', sep=' ')
} else {
paste0('Number', i, 'is not divisible by 10.', sep=' ')
}
}
ints <- 1:100
for (i in ints) {
if (i %% 10 == 0) {
print(paste0('Number', i, 'is divisible by 10.', sep=' '))
} else {
print(paste0('Number', i, 'is not divisible by 10.', sep=' '))
}
}
for (i in ints) {
if (i %% 10 == 0) {
print(paste0('Number ', i, ' is divisible by 10.', sep=''))
} else {
print(paste0('Number ', i, ' is not divisible by 10.', sep=''))
}
}
?runif
set.seed(123)
x <- runif(100000)
x
set.seed(123)
x <- runif(1)
x
set.seed(123)
for (i in ints) {
x <- runif(1)
print(x)
}
set.seed(123)
cumulative_sum <- 0
counter <- 0
while (cumulative_sum <= 100) {
cumulative_sum <- cumulative_sum + runif(1)
counter <- counter + 1
}
counter
set.seed(123)
cumulative_sum <- 0
counter <- 0
while (cumulative_sum <= 100) {
cumulative_sum <- cumulative_sum + runif(1)
counter <- counter + 1
}
counter
set.seed(123)
cumulative_sum <- 0
counter <- 0
while (cumulative_sum <= 100) {
cumulative_sum <- cumulative_sum + runif(1)
counter <- counter + 1
}
counter
set.seed(123)
cumulative_sum <- 0
counter <- 0
while (cumulative_sum <= 100) {
cumulative_sum <- cumulative_sum + runif(1)
counter <- counter + 1
}
print(paste0('cumulative_sum = ', cumulative_sum, '; counter = ', counter))
set.seed(123)
cumulative_sum <- 0
counter <- 0
while (cumulative_sum <= 100) {
cumulative_sum <- cumulative_sum + runif(1)
counter <- counter + 1
}
print(paste0('cumulative_sum = ', cumulative_sum, '; counter = ', counter))
#3.
install.packages("Lahman")
library(Lahman)
cor(Batting %>% select(H, X2B, HR, RBI))
library(dplyr)
library(Lahman)
cor(Batting %>% select(H, X2B, HR, RBI))
#3.
library(tidyr)
battingDF <- batting %>% drop_na()
cor(battingDF %>% select(H, X2B, HR, RBI))
battingDF <- batting %>% drop_na(H, X2B, HR, RBI)
cor(battingDF)
battingDF <- Batting %>% drop_na(H, X2B, HR, RBI)
cor(battingDF)
cor(Batting %>% filter(!is.na(a)) %>% select(H, X2B, HR, RBI))
cor(Batting %>% filter(!is.na()) %>% select(H, X2B, HR, RBI))
cor(Batting %>% filter(!is.na(RBI)) %>% select(H, X2B, HR, RBI))
battingDF <- Batting %<% filter(!is.na(H) && !is.na(X2B) && !is.na(HR) && !is.na(RBI))
cor(battingDF %>% select(H, X2B, HR, RBI))
library(corrgram)
install.packages("corrgram")
library(corrgram)
corrgram(battingDF %>% select(H, X2B, HR, RBI))
install.packages("GGally")
library(ggplot2)
library(GGally)
ggpairs(battingDF %>% select(H, X2B, HR, RBI))
ggplot(data = battingDF) +
geom_point(mapping = (aes(x=H, y=X2B)))
battingDF <- Batting %<%
filter(!is.na(H) && !is.na(X2B) && !is.na(HR) && !is.na(RBI)) %>%
select(H, X2B, HR, RBI)
library(dplyr)
battingDF <- Batting %<%
filter(!is.na(H) && !is.na(X2B) && !is.na(HR) && !is.na(RBI)) %>%
select(H, X2B, HR, RBI)
battingDF <- Batting %>%
filter(!is.na(H) && !is.na(X2B) && !is.na(HR) && !is.na(RBI)) %>%
select(H, X2B, HR, RBI)
cor(battingDF)
battingDF <- Batting %>%
filter(!is.na(H) && !is.na(X2B) && !is.na(HR) && !is.na(RBI))
head(battingDF)
battingDF <- Batting %>%
filter(!is.na(H) && !is.na(X2B) && !is.na(HR) && !is.na(RBI)) %>%
select(H, X2B, HR, RBI)
head(battingDF)
cor(battingDF)
battingDF <- Batting %>%
filter(!is.na(H) && !is.na(X2B) && !is.na(HR) && !is.na(RBI))
battingDF_clean <- battingDF %>% select(H, X2B, HR, RBI)
head(battingDF_clean)
cor(battingDF_clean)
battingDF_clean <- Batting %>%
filter(!is.na(H) && !is.na(X2B) && !is.na(HR) && !is.na(RBI))
battingDF <- battingDF_clean %>% select(H, X2B, HR, RBI)
head(battingDF)
cor(battingDF)
battingDF_clean <- Batting %>%
filter(!is.na(H) & !is.na(X2B) & !is.na(HR) & !is.na(RBI))
battingDF <- battingDF_clean %>% select(H, X2B, HR, RBI)
head(battingDF)
cor(battingDF)
ggpairs(battingDF)
p3 <- ggplot(data = battingDF) +
geom_point(mapping = (aes(x=H, y=X2B)))
p3
ggpairs(battingDF)
x <- c(20, 20, 20, 20, 20,)
mean(x)
x <- c(20, 20, 20, 20, 20, 20,
21, 21, 21, 21, 21, 21, 21,
22, 22, 22, 22, 22, 22,
23, 23, 23,
25,
27,
28,
29, 29, 29,
30)
mean(x)
x <- c(20, 20, 20, 20, 20,
21, 21, 21, 21, 21, 21,
22, 22, 22, 22, 22,
23, 23, 23,
25,
27,
28,
29, 29, 29,
30)
mean(x)
median(x)
sd(x)
var(x)
(sd(x))^2
install.packages("car")
library(magrittr)
library(tidyverse)
library(car)
library(knitr)
library(psych)
# Importing .csv files
hotels <- read.csv("data/hotels.csv")
# View the structure of hotels
str(hotels)
# Importing .csv files
hotels <- read.csv("data/hotels.csv")
getwd()
setwd('C:/Users/Mark/Source/BANA 7025 - Data Wrangling/Final Project/Peer review')
# Importing .csv files
hotels <- read.csv("data/hotels.csv")
# View the structure of hotels
str(hotels)
# View the first 6 rows of hotels
head(hotels)
hotels$is_canceled  <- as.factor(hotels$is_canceled)
hotels$arrival_date_year   <- as.factor(hotels$arrival_date_year )
hotels$arrival_date_week_number  <- as.factor(hotels$arrival_date_week_number )
hotels$arrival_date_day_of_month   <- as.factor(hotels$arrival_date_day_of_month)
hotels$is_repeated_guest   <- as.factor(hotels$is_repeated_guest)
hotels$previous_cancellations  <- as.factor(hotels$previous_cancellations)
hotels$previous_bookings_not_canceled <- as.factor(hotels$previous_bookings_not_canceled)
hotels$previous_cancellations  <- as.factor(hotels$previous_cancellations)
hotels$booking_changes  <- as.factor(hotels$booking_changes)
#create new variable: arrival_date
hotels$arrival_date <-paste(hotels$arrival_date_month,
hotels$arrival_date_day_of_month,
hotels$arrival_date_year,sep="-")
as.Date(hotels$arrival_date, format="%B-%d-%Y")
#create new variable: stays_nights
hotels %>% mutate(stays_nights= stays_in_weekend_nights + stays_in_week_nights) -> hotels_new
summary(hotels_new)
unique(hotels_new$meal)
str(hotels_new)
str(hotels_new$meal)
hotels_new$meal
hotels_new$meal = "Undefined"
unique(hotels_new$meal)
# Importing .csv files
hotels <- read.csv("data/hotels.csv")
# View the structure of hotels
str(hotels)
# View the first 6 rows of hotels
head(hotels)
hotels$is_canceled  <- as.factor(hotels$is_canceled)
hotels$arrival_date_year   <- as.factor(hotels$arrival_date_year )
hotels$arrival_date_week_number  <- as.factor(hotels$arrival_date_week_number )
hotels$arrival_date_day_of_month   <- as.factor(hotels$arrival_date_day_of_month)
hotels$is_repeated_guest   <- as.factor(hotels$is_repeated_guest)
hotels$previous_cancellations  <- as.factor(hotels$previous_cancellations)
hotels$previous_bookings_not_canceled <- as.factor(hotels$previous_bookings_not_canceled)
hotels$previous_cancellations  <- as.factor(hotels$previous_cancellations)
hotels$booking_changes  <- as.factor(hotels$booking_changes)
#create new variable: arrival_date
hotels$arrival_date <-paste(hotels$arrival_date_month,
hotels$arrival_date_day_of_month,
hotels$arrival_date_year,sep="-")
as.Date(hotels$arrival_date, format="%B-%d-%Y")
#create new variable: stays_nights
hotels %>% mutate(stays_nights= stays_in_weekend_nights + stays_in_week_nights) -> hotels_new
summary(hotels_new)
unique(hotels_new$meal)
str(hotels_new$meal)
hotels_new$meal == "Undefined"
sum(hotels_new$meal == "Undefined")
sum(hotels_new$meal == "SC")
hotels_new$meal[hotels_new$meal == "Undefined"] <- "SC"
sum(hotels_new$meal == "Undefined")
sum(hotels_new$meal == "SC")
106650 + 1169
10650 + 1169
hotels_new$meal[hotels_new$meal == "Undefined"] <- "SC"
colSums(is.na(hotels_new))
?Boxplot()
