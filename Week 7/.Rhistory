ggplot(aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point()
# by visualizing residuals we can assess
sim1 %>%
add_residuals(sim1_mod) %>%
ggplot(aes(resid)) +
geom_histogram(binwidth = .5)
sim1 %>%
add_residuals(sim1_mod) %>%
ggplot(aes(x, resid)) +
geom_ref_line(h = 0) +
geom_point()
# by visualizing residuals we can assess
sim1 %>%
add_residuals(sim1_mod) %>%
ggplot(aes(resid)) +
geom_histogram(binwidth = .5)
# add the predictions and residuals to the mtcars data set and plot them
mtcars %>%
add_predictions(mtcars_mod) %>%
add_residuals(mtcars_mod) %>%
ggplot(aes(wt, mpg)) +
geom_point() +
geom_line(aes(y = pred), color = "red", size = 1)
# add the predictions and residuals to the mtcars data set and plot them
mtcars %>%
add_predictions(mtcars_mod) %>%
add_residuals(mtcars_mod) %>%
ggplot(aes(wt, mpg)) +
geom_point() +
geom_line(aes(y = pred), color = "red", size = 5)
# add the predictions and residuals to the mtcars data set and plot them
mtcars %>%
add_predictions(mtcars_mod) %>%
add_residuals(mtcars_mod) %>%
ggplot(aes(wt, mpg)) +
geom_point() +
geom_line(aes(y = pred), color = "red", size = 1)
mtcars %>%
add_predictions(mtcars_mod) %>%
add_residuals(mtcars_mod) %>%
ggplot(aes(wt, resid)) +
geom_ref_line(h = 0) +
geom_point()
mtcars %>%
add_residuals(mtcars_mod) %>%
ggplot(aes(wt, resid)) +
geom_ref_line(h = 0) +
geom_point()
mtcars %>%
add_residuals(mtcars_mod) %>%
ggplot(aes(resid)) +
geom_histogram(binwidth = .5)
##############
# Your Turn! #
##############
# model mpg ~ cyl with cyl being categorical
mtcars_mod_cyl <- lm(mpg ~ cyl, data = mtcars)
# plot the predictions
mtcars %>%
add_predictions(mtcars_mod_cyl) %>%
ggplot(aes(cyl, mpg)) +
geom_point() +
geom_point(aes(y = pred), color = "red", size = 4)
# plot the residuals
mtcars %>%
add_residuals(mtcars_mod_cyl) %>%
ggplot(aes(cyl, resid)) +
geom_ref_line(h = 0) +
geom_point()
################################################
# Interactions btwn continuous and categorical #
################################################
sim3
ggplot(sim3, aes(x1, y, color = x2)) +
geom_point() +
facet_wrap(~ x2, nrow = 1)
?sim3
# two potential model specifications, explain difference btwn + and *
mod1 <- lm(y ~ x1 + x2, data = sim3)
mod2 <- lm(y ~ x1 * x2, data = sim3)
model_matrix(sim3, y ~ x1 + x2)
model_matrix(sim3, y ~ x1 * x2)
summary(mod1)
summary(mod2)
sim3 %>%
gather_predictions(mod1, mod2) %>%
ggplot(aes(x1, y, color = x2)) +
geom_point() +
geom_line(aes(y = pred)) +
facet_grid(model ~ x2)
# compare summaries
summary(mtcars_mod3)
summary(mtcars_mod4)
##############
# Your Turn! #
##############
# compare the following two models for the mtcars data
mtcars_mod3 <- lm(mpg ~ wt + as.factor(cyl), data = mtcars)
mtcars_mod4 <- lm(mpg ~ wt * as.factor(cyl), data = mtcars)
# compare summaries
summary(mtcars_mod3)
summary(mtcars_mod4)
# compare model matrix
model_matrix(mtcars, mpg ~ wt + as.factor(cyl))
model_matrix(mtcars, mpg * wt + as.factor(cyl))
model_matrix(mtcars, mpg ~ wt * as.factor(cyl))
# compare predicted values
mtcars %>%
gather_predictions(mtcars_mod3, mtcars_mod4) %>%
ggplot(aes(wt, mpg, color = as.factor(cyl))) +
geom_point() +
geom_line(aes(y = pred)) +
facet_grid(model ~ as.factor(cyl))
# compare residuals
mtcars %>%
gather_residuals(mtcars_mod3, mtcars_mod4) %>%
ggplot(aes(wt, resid, color = as.factor(cyl))) +
geom_ref_line(h = 0, size = 1) +
geom_point() +
facet_grid(model ~ as.factor(cyl))
# prerequisites
library(tidyverse)
library(modelr)
options(na.action = na.warn)
##############
##############
# why are low quality diamonds more expensive?
p1 <- ggplot(diamonds, aes(cut, price)) + geom_boxplot() + scale_y_continuous(labels = scales::dollar) + ggtitle("Price vs Cut")
p2 <- ggplot(diamonds, aes(color, price)) + geom_boxplot() + scale_y_continuous(labels = scales::dollar) + ggtitle("Price vs Color")
p3 <- ggplot(diamonds, aes(clarity, price)) + geom_boxplot() + scale_y_continuous(labels = scales::dollar) + ggtitle("Price vs Clarity")
gridExtra::grid.arrange(p1, p2, p3, nrow = 1)
ggplot(diamonds, aes(carat, price)) +
geom_hex(bins = 50) +
scale_x_log10()
ggplot(diamonds, aes(carat, price)) +
geom_hex(bins = 50) +
scale_y_log10()
######################
# Your Turn - Part 1 #
######################
# What is the strength of this linear trend?
cor.test(diamonds$carat, diamonds$price)
# Does it differ depending on the different levels of cut, color, and clarity
diamonds %>% ggplot(aes(carat, price, color = cut)) +
geom_point() +
facet_wrap(~ cut, nrow = 1)
# Does it differ depending on the different levels of cut, color, and clarity
diamonds %>% ggplot(aes(carat, price, color = cut)) +
geom_point() +
facet_wrap(~ cut, nrow = 2)
diamonds %>% ggplot(aes(carat, price, color = cut)) +
geom_point() +
facet_wrap(~ cut, nrow = 2)
diamonds %>% ggplot(aes(carat, price, color = color)) +
geom_point() +
facet_wrap(~ color, nrow = 2)
diamonds %>% ggplot(aes(carat, price, color = clarity)) +
geom_point() +
facet_wrap(~ clarity, nrow = 2)
# Does it differ depending on the different levels of cut, color, and clarity
diamonds %>% group_by(cut) %>%
summarise(corr = cor(carat, price))
diamonds %>% group_by(color) %>%
summarise(corr = cor(carat, price))
diamonds %>% group_by(clarity) %>%
summarise(corr = cor(carat, price))
# Does it differ depending on the different levels of cut, color, and clarity
diamonds %>% group_by(cut) %>%
summarise(corr = cor(carat, price))
######################
# Your Turn - Part 2 #
######################
# 1. Fit a linear model between the price and carat variables
lm_carat_price <- lm(price ~ carat, data = diamonds)
# 2. Assess model numerically
summary(lm_carat_price)
# 3. Get prediction and residual data and add it to the diamonds data set
diamonds %>%
add_predictions(lm_carat_price) %>%
add_residuals(lm_carat_price) ->
diamonds
diamonds
# 4. Visually assess model predictions
diamonds %>%
add_predictions(lm_carat_price) %>%
ggplot(aes(carat, price)) +
geom_point() +
geom_line(aes(y = pred), color = "red", size = 1)
# 5. Visually assess model residuals
diamonds %>%
add_residuals(lm_carat_price) %>%
ggplot(aes(carat, resid)) +
geom_ref_line(h = 0) +
geom_point()
diamonds %>%
add_residuals(lm_carat_price) %>%
ggplot(aes(cut, resid)) +
geom_ref_line(h = 0) +
geom_point()
diamonds %>%
add_residuals(lm_carat_price) %>%
ggplot(aes(color, resid)) +
geom_ref_line(h = 0) +
geom_point()
diamonds %>%
add_residuals(lm_carat_price) %>%
ggplot(aes(clarity, resid)) +
geom_ref_line(h = 0) +
geom_point()
############################
# building onto this model #
############################
# create a more complex model that incorporates cut, color, and clarity
diamonds3 <- diamonds %>%
select(price, carat, color, cut, clarity)
mod_diamond <- lm(log10(price) ~ log10(carat) + color + cut + clarity,
data = diamonds3)
# how does this model appear to fit numerically
summary(mod_diamond)
# assess predictions
# example with cut
diamonds3 %>%
data_grid(cut, .model = mod_diamond) %>%
add_predictions(mod_diamond) %>%
mutate(trans_pred = 10 ^ pred) %>%
ggplot(aes(cut, trans_pred)) +
geom_point() +
scale_y_continuous(labels = scales::dollar)
# example with color
diamonds3 %>%
data_grid(color, .model = mod_diamond) %>%
add_predictions(mod_diamond) %>%
mutate(trans_pred = 10 ^ pred) %>%
ggplot(aes(color, trans_pred)) +
geom_point()
# example with clarity
diamonds3 %>%
data_grid(clarity, .model = mod_diamond) %>%
add_predictions(mod_diamond) %>%
mutate(trans_pred = 10 ^ pred) %>%
ggplot(aes(clarity, trans_pred)) +
geom_point()
diamonds %>%
add_residuals(mod_diamond) %>%
ggplot(aes(carat, resid)) +
geom_ref_line(h = 0) +
geom_point()
#############
# Your Turn #
#############
# Lastly, how do the residuals look for this mod_diamond model?
diamonds %>%
add_residuals(mod_diamond) %>%
ggplot(aes(price, resid)) +
geom_ref_line(h = 0) +
geom_point()
gapminder
?gapminder
#################
# prerequisites #
#################
library(modelr)
library(tidyverse)
library(gapminder)
?gapminder
gapminder
gapminder %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
# model this relationship
full_mod <- lm(lifeExp ~ year + country, data = gapminder)
summary(full_mod)
# what if we want to focus on a single country
usa <- filter(gapminder, country == "United States")
usa %>%
ggplot(aes(year, lifeExp)) +
geom_line() +
ggtitle("Full data = ")
usa_mod <- lm(lifeExp ~ year, data = usa)
usa %>%
add_predictions(usa_mod) %>%
ggplot(aes(year, pred)) +
geom_line() +
ggtitle("Linear trend + ")
usa %>%
add_residuals(usa_mod) %>%
ggplot(aes(year, resid)) +
geom_hline(yintercept = 0, colour = "white", size = 3) +
geom_line() +
ggtitle("Remaining pattern")
# But what if we want to compare this same model across every country?
###############
# Nested data #
###############
# introducing a new data structure = the nested data frame
by_country <- gapminder %>%
group_by(country, continent) %>%
nest()
by_country
# what is in each data column element? -- these kind of columns are called "list-columns"
by_country$data[[1]]
###############################
# Iterative model application #
###############################
country_model <- function(df) {
lm(lifeExp ~ year, data = df)
}
# using the map function we can apply this model over every element in the
# data column
map(by_country$data, country_model)
# however, if we use mutate we can actually save the results in a new list-column
by_country <- by_country %>%
mutate(model = map(data, country_model))
by_country
#############
# Unnesting #
#############
# if we want to pull information out of our models (i.e. predicted values or
# residuals) we can apply map2()
by_country %>%
mutate(resids = map2(data, model, add_residuals))
# we can then unnest our data
by_country %>%
mutate(resids = map2(data, model, add_residuals)) %>%
unnest(resids)
# and do our normal visualization
by_country %>%
mutate(resids = map2(data, model, add_residuals)) %>%
unnest(resids) %>%
ggplot(aes(year, resid)) +
geom_line(aes(group = country), alpha = 1 / 3) +
geom_smooth(se = FALSE)
# if we facet by continent we get even better insight to where models are
# performing poorly
by_country %>%
mutate(resids = map2(data, model, add_residuals)) %>%
unnest(resids) %>%
ggplot(aes(year, resid)) +
geom_line(aes(group = country), alpha = 1 / 3) +
geom_smooth(se = FALSE) +
facet_wrap(~ continent)
#################
# Model Quality #
#################
# we can use broom::glance() to extract some model quality metrics
broom::glance(usa_mod)
# to apply this over all our models
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance, .drop = TRUE) # show without .drop first and then with it
# this allows us to do some quick assessment of our many models
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance, .drop = TRUE) %>%
arrange(adj.r.squared)
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance, .drop = TRUE) %>%
ggplot(aes(continent, adj.r.squared)) +
geom_jitter(width = 0.25)
# We could pull out the countries with particularly bad  R2R2  and plot the data:
bad_fit <- by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance, .drop = TRUE) %>%
filter(r.squared < 0.25)
gapminder %>%
semi_join(bad_fit, by = "country") %>%
ggplot(aes(year, lifeExp, colour = country)) +
geom_line()
# what could this be from?
# likely the tragedies of the HIV/AIDS epidemic and the Rwandan genocide
# to apply this over all our models
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance, .drop = FALSE) # show without .drop first and then with it
# to apply this over all our models
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance, .drop = TRUE) # show without .drop first and then with it
?unnest
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance)
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>%
arrange(adj.r.squared)
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>%
arrange(adj.r.squared)
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>%
ggplot(aes(continent, adj.r.squared)) +
geom_jitter(width = 0.25)
bad_fit <- by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>%
filter(r.squared < 0.25)
gapminder %>%
semi_join(bad_fit, by = "country") %>%
ggplot(aes(year, lifeExp, colour = country)) +
geom_line()
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance)
# 1. Can you find the country models with the highest adjusted R2? What about the lowest?
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>%
arrange(adj.r.squared)
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>%
arrange(desc(adj.r.squared))
# this allows us to do some quick assessment of our many models
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>%
arrange(adj.r.squared)
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>%
ggplot(aes(continent, adj.r.squared)) +
geom_jitter(width = 0.25)
# 2. Plot the adjusted R2 against each continent? What do you find?
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>%
ggplot(aes(country, adj.r.squared)) +
geom_jitter(width = 0.25)+
facet_wrap(~ continent)
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance)
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>%
ggplot(aes(country, adj.r.squared)) +
geom_jitter(width = 0.25)
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>%
ggplot(aes(country, adj.r.squared)) +
geom_jitter(width = 0.25) +
facet_wrap(~ continent)
gapminder %>%
semi_join(bad_fit, by = "country") %>%
ggplot(aes(year, lifeExp, colour = country)) +
geom_line()
bad_fit <- by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>%
filter(adj.r.squared < 0.25)
bad_fit
gapminder %>%
semi_join(bad_fit, by = "country") %>%
ggplot(aes(year, lifeExp, colour = country)) +
geom_line()
bad_fit
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>%
arrange(desc(adj.r.squared))
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>% filter(continent == "Asia")
arrange(desc(adj.r.squared))
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>% filter(continent == "Asia") %>%
arrange(desc(adj.r.squared))
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance) %>% filter(continent == "Asia") %>%
arrange(desc(adj.r.squared)) -> test
View(test)
usa_mod <- lm(lifeExp ~ year, data = usa)
usa %>%
add_predictions(usa_mod) %>%
ggplot(aes(year, pred)) +
geom_line() +
ggtitle("Linear trend + ")
#############################################
# How does life expectancy change over time #
#############################################
gapminder %>% filter(country = "china")
#############################################
# How does life expectancy change over time #
#############################################
gapminder %>% filter(country = "China")
#############################################
# How does life expectancy change over time #
#############################################
gapminder %>% filter(country = "China") %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
#############################################
# How does life expectancy change over time #
#############################################
gapminder %>% filter(country == "China") %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
#############################################
# How does life expectancy change over time #
#############################################
gapminder %>% filter(country %in% c("United States","China")) %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
